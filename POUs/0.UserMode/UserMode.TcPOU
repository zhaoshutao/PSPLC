<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="UserMode" Id="{dbb58c86-3204-4c0e-a297-03b24a68bd10}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM UserMode
VAR
(*key Command*)
	btn_Power:BOOL;
	btn_PowerOn: BOOL;
	btn_PowerOff: BOOL;
(*GapMode*)
	UserGapPositionNew:LREAL:=20;//target
	UserGapVelocityNew:LREAL:=1;//target
	UserGapPositionDisplay:LREAL;//current
	UserGapVelocityDisplay:LREAL;//current
	//
	(**)
	btn_UserGapMove:BOOL;
	btn_UserGapStop:BOOL;
	(*Var*)
	fb_ton1:TON;
	fb_ton2:TON;
	fb_ton3:TON;
	(*Status*)
	State:DINT;
	Busy:BOOL;
	InitPowerDone:BOOL;
	InitCompensationDatasDone:BOOL;
	(*FB*)
	m_state: DINT;
	n_state: DINT;
	s_state: DINT;
	(*¼ì²âµ½ÏÞÎ»£¬»Ö¸´Move×´Ì¬*)
	FTrig_ReachLS: F_TRIG;
	FTrig_btn_GapMove: F_TRIG;
	GapOutRange: BOOL;
	(*PowerOff*)
	d_state: DINT;
	i: INT;
	j: INT;
	k: INT;
	moni_State:DINT;
	TargetPosLessThanCurrentPos:BOOL;
	PositiveMoving:BOOL;
	HysteresisMoving:BOOL;
	NoneHysteresisMoving:BOOL;
	(*Spectroscopy scanning Mode*)
	IsSSMotionMode:BOOL;
	RegularMotionMode:BOOL;
	SSMotionMode:BOOL;
	SS_StepSize:LREAL:=0.001;
	SS_StepNumber:INT:=10;
	SS_StepVelocity:LREAL:=1;
	SS_Move:BOOL;
	SS_Stop:BOOL;
	SS_MoveState:DINT;
	SS_StopState:DINT;
	SS_currentStep:DINT:=0;
	SS_StepSystemTime_Begin:ARRAY[0..100] OF ULINT;
	SS_StepSystemTime_End:ARRAY[0..100] OF ULINT;
	SS_StepCountTime:ARRAY[0..100] OF ULINT;
	SS_TimeCountBegin:BOOL;
	m: INT;
	SS_TON: TON;
	StepEachTime:TIME;
	StepEachTime_ms:INT:=1000;//ms
	SS_OTSTRUCT :OTSTRUCT ;
	SS_StartPositionDisplay:LREAL;
	RTRG_SS_StartPositionDisplay:R_TRIG;
	SS_InitStartPositionDone:BOOL;
	(*input protection*)
	//
	min_UserGapPositionNew:LREAL:=10;
	max_UserGapPositionNew:LREAL:=200;
	inRange_UserGapPositionNew:BOOL;
	//
	min_UserGapVelocityNew:LREAL:=0;
	max_UserGapVelocityNew:LREAL:=3;
	inRange_UserGapVelocityNew:BOOL;
	//
	min_UserTaperPositionNew: LREAL:=0;;
	max_UserTaperPositionNew: LREAL:=4;
	inRange_UserTaperPositionNew: BOOL;
	//
	min_UserTaperVelocityNew: LREAL:=0;
	max_UserTaperVelocityNew: LREAL:=1;
	inRange_UserTaperVelocityNew: BOOL;
	//
	min_SS_StepSize	: LREAL:=0;
	max_SS_StepSize	: LREAL:=200;
	inRange_SS_StepSize	: BOOL;
	//
	min_SS_StepNumber	: INT:=1;
	max_SS_StepNumber	: INT:=1000;
	inRange_SS_StepNumber	: BOOL;
	//
	min_SS_StepVelocity:LREAL:=0;
	max_SS_StepVelocity:LREAL:=1;
	inRange_SS_StepVelocity:BOOL;
	//
	min_StepEachTime_ms:INT:=100;
	max_StepEachTime_ms:INT:=10000;
	inRange_StepEachTime_ms:BOOL;
	l: INT;
	testa: BOOL;
	testb: BOOL;
	Threshold_GapChangeFlag: LREAL;
	Threshold_TaperChangeFlag: LREAL;
	TaperAndGapSafetyfactor: LREAL:=1;
	
	//Global Chain protection
	Global_ChainProtection_BeamLineReady:BOOL;
	Global_ChainProtection_StorageRingReady:BOOL;
	Global_ChainProtection_On: BOOL;
	Global_ChainProtection_MaxGapValue: LREAL;
	Global_ChainProtection_MoveVelocity: LREAL;
	Global_ChainProtection_Done: BOOL;
	//Global_ChainProtection_Error: BOOL;
	//Global_ChainProtection_ErrorID: INT;
	//Global_ChainProtection_ErrorDescription: STRING;
	Global_ChainProtection_ManualOperation:BOOL:=TRUE;
	Global_ChainProtection_FTRIG:F_TRIG;
	Global_ChainProtection_FTRIG_Manul:F_TRIG;
	Global_ChainProtection_TON:TON;
	Global_ChainProtection_Triggered:BOOL;
	Global_ChainProtection_In:BOOL;
	Global_ChainProtection_In1 AT%I* :BOOL;//下降沿表示触发
	Global_ChainProtection_In2 AT%I* :BOOL;
	Global_ChainProtection_In3 AT%I* :BOOL;
	Global_ChainProtection_In4 AT%I* :BOOL;
	Global_ChainProtection_State:DINT;
	Global_ChainProtection_Out1 AT%Q* :BOOL;//上升沿标识到达最大间隙，连锁保护成功
	Global_ChainProtection_Out2 AT%Q* :BOOL;
	Global_ChainProtection_Out3 AT%Q* :BOOL;
	Global_ChainProtection_Out4 AT%Q* :BOOL;
	Global_ChainProtection_TON_Stop2Move:TON;
	Global_ChainProtection_TON_Stop2Move_InTaperMode:TON;
	Global_ChainProtection_TON_Power2Move:TON;
	//
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT PositionBiasDone THEN
	RETURN;
END_IF
IF NOT loadParametersDone THEN
	RETURN;
END_IF
(*btn_Power On/Off*)
IF btn_Power AND NOT st_Power THEN
	btn_PowerOn:=TRUE;
	btn_Power:=FALSE;
END_IF
IF btn_Power AND st_Power THEN
	btn_PowerOff:=TRUE;
	btn_Power:=FALSE;
END_IF
IF btn_PowerOn THEN
	A_PowerOn();
END_IF
IF btn_PowerOff THEN
	A_PowerOff();
END_IF


(*补偿数据处理*)
A_InitCompensationData();

(*常规磁间隙开合*)
IF RegularMotionMode AND NOT SSMotionMode THEN
	A_RegularMotion();
END_IF

(*Spectroscopy scanning Mode*)
IF IsSSMotionMode THEN
	SSMotionMode:=TRUE;
	RegularMotionMode:=FALSE;
ELSE
	SSMotionMode:=FALSE;
	RegularMotionMode:=TRUE;
END_IF
IF	SSMotionMode AND NOT RegularMotionMode THEN
	A_SpectroscopyScanningMotion();
END_IF

(*CheckInputPosVelo*)
A_CheckInputPosVelo();
(*检查光栅读数是否在范围内*)
A_CheckLinearEncoder();
(**)
A_GlobalChainProtection();]]></ST>
    </Implementation>
    <Action Name="A_CheckInputPosVelo" Id="{8153d8d0-8d46-4560-8544-b339b78263b6}">
      <Implementation>
        <ST><![CDATA[//gap posiion
IF UserGapPositionNew<min_UserGapPositionNew OR UserGapPositionNew>max_UserGapPositionNew THEN
	inRange_UserGapPositionNew:=FALSE;
END_IF
IF UserGapPositionNew>=min_UserGapPositionNew AND UserGapPositionNew<=max_UserGapPositionNew THEN
	inRange_UserGapPositionNew:=TRUE;
END_IF
//gap velocity
IF UserGapVelocityNew<min_UserGapVelocityNew OR UserGapVelocityNew>max_UserGapVelocityNew THEN
	inRange_UserGapVelocityNew:=FALSE;
END_IF
IF UserGapVelocityNew>=min_UserGapVelocityNew AND UserGapVelocityNew<=max_UserGapVelocityNew THEN
	inRange_UserGapVelocityNew:=TRUE;
END_IF

//SS Mode
IF SS_StepSize<min_SS_StepSize OR SS_StepSize>max_SS_StepSize THEN
	inRange_SS_StepSize:=FALSE;
END_IF
IF SS_StepSize>=min_SS_StepSize AND SS_StepSize<=max_SS_StepSize THEN
	inRange_SS_StepSize:=TRUE;
END_IF
IF SS_StepNumber<min_SS_StepNumber OR SS_StepNumber>max_SS_StepNumber THEN
	inRange_SS_StepNumber:=FALSE;
END_IF
IF SS_StepNumber>=min_SS_StepNumber AND SS_StepNumber<=max_SS_StepNumber THEN
	inRange_SS_StepNumber:=TRUE;
END_IF
IF SS_StepVelocity<min_SS_StepVelocity OR SS_StepVelocity>max_SS_StepVelocity THEN
	inRange_SS_StepVelocity:=FALSE;
END_IF
IF SS_StepVelocity>=min_SS_StepVelocity AND SS_StepVelocity<=max_SS_StepVelocity THEN
	inRange_SS_StepVelocity:=TRUE;
END_IF
IF StepEachTime_ms<min_StepEachTime_ms OR StepEachTime_ms>max_StepEachTime_ms THEN
	inRange_StepEachTime_ms:=FALSE;
END_IF
IF StepEachTime_ms>=min_StepEachTime_ms AND StepEachTime_ms<=max_StepEachTime_ms THEN
	inRange_StepEachTime_ms:=TRUE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_CheckLinearEncoder" Id="{04ef6a41-e2ba-498d-aa00-f823237bb5de}">
      <Implementation>
        <ST><![CDATA[//如果没有使用光栅、或者光栅参数没设置好，则不检查光栅位置
IF NOT USELinearEncoder OR NOT PositionBiasDone THEN
	RETURN;
END_IF
IF Pos_PhaseShifterLin <=0 THEN
	ErrorID:=1101;
	Error:=TRUE;
	ErrorDescription:='Pos_PhaseShifterLin <=0';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
//
IF Pos_PhaseShifterLin >UserMode.max_UserGapPositionNew THEN
	ErrorID:=1105;
	Error:=TRUE;
	ErrorDescription:='Pos_PhaseShifterLin >UserMode.max_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF

//
IF Pos_PhaseShifterLin <UserMode.min_UserGapPositionNew THEN
	ErrorID:=1109;
	Error:=TRUE;
	ErrorDescription:='Pos_PhaseShifterLin <UserMode.min_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GlobalChainProtection" Id="{ecd1f1b6-2927-4068-abcb-b5e762194253}">
      <Implementation>
        <ST><![CDATA[//硬线输入定义
Global_ChainProtection_In:=Global_ChainProtection_In1 AND Global_ChainProtection_In2
					AND	Global_ChainProtection_In3 AND Global_ChainProtection_In4;
//硬线输出定义
Global_ChainProtection_Out1:=Global_ChainProtection_Done;
Global_ChainProtection_Out2:=Global_ChainProtection_Done;
Global_ChainProtection_Out3:=Global_ChainProtection_Done;
Global_ChainProtection_Out4:=Global_ChainProtection_Done;
//总开关
IF NOT Global_ChainProtection_On THEN
	RETURN;
END_IF
//判断插入件状态，是否就位
//IF NOT IDControlReady THEN
//	Global_ChainProtection_Done:=FALSE;
//	Error:= TRUE;
//	ErrorID:= 1401;
//	ErrorDescription:='ID NOT READY!';
//	RETURN;
//END_IF
//判断束线是否给出就位信号，暂时由参数表给出TRUE，最终将由IOC接受PV
IF 	NOT Global_ChainProtection_BeamLineReady THEN
	Global_ChainProtection_Done:=FALSE;
	Error:= TRUE;
	ErrorID:= 1402;
	ErrorDescription:='BeamLineChainProtection NOT Ready';
	RETURN;
END_IF	
//判断储存环是否给出就位信号，暂时由参数表给出TRUE，最终将由IOC接受PV
IF 	NOT Global_ChainProtection_StorageRingReady THEN
	Global_ChainProtection_Done:=FALSE;
	Error:= TRUE;
	ErrorID:= 1403;
	ErrorDescription:='StorageRingChainProtection NOT Ready';
	RETURN;
END_IF
//
//全局连锁保护程序开始
//
//0.检测到下降沿，触发
//1.判断电机是否在开启状态,没有就打开电源
//2.判断是否在Moving状态,若有就Stop
//3.将磁间隙打开到至最大阈值
//4.到位后给出反馈，且安全PLC触发
Global_ChainProtection_FTRIG(CLK:=Global_ChainProtection_In);
IF Global_ChainProtection_FTRIG.Q THEN
	Global_ChainProtection_Triggered:=TRUE;
END_IF
Global_ChainProtection_FTRIG_Manul(CLK:=Global_ChainProtection_ManualOperation);
IF Global_ChainProtection_FTRIG_Manul.Q THEN
	Global_ChainProtection_Triggered:=TRUE;
END_IF
IF Global_ChainProtection_Triggered THEN
	CASE Global_ChainProtection_State OF
		0://1.判断电机是否在开启状态,没有就打开电源
			IF st_Power=1 THEN
				Global_ChainProtection_State:=1;
			ELSE
				btn_PowerOn:=TRUE;
				IF btn_PowerOn THEN
					A_PowerOn();
				END_IF
			END_IF
		1://1.判断是否在谱学扫描模式，如果是，则切换回正常运动模式
			IF IsSSMotionMode THEN
				SS_Stop:=TRUE;
				IsSSMotionMode:=FALSE;
			END_IF
			Global_ChainProtection_State:=2;
		2://2.判断是否在Moving状态,若有就Stop.Taper模式已处理完，此处开始走正常GAP开合逻辑
			IF MAIN.moveStatusPhaseShifterLin THEN
				btn_UserGapStop:=TRUE;
			ELSE
				Global_ChainProtection_TON_Stop2Move(PT:=T#0.5S);
				Global_ChainProtection_TON_Stop2Move.IN:=TRUE;
				IF Global_ChainProtection_TON_Stop2Move.Q THEN
					Global_ChainProtection_State:=3;
				END_IF
			END_IF
		3://4.将磁间隙打开到至最大阈值
			Global_ChainProtection_TON(PT:=INT_TO_TIME(LREAL_TO_INT(Global_ChainProtection_MaxGapValue/Global_ChainProtection_MoveVelocity+30))*1000);
			Global_ChainProtection_TON.IN:=TRUE;
			Global_ChainProtection_TON_Power2Move(PT:=T#0.1S);
			Global_ChainProtection_TON_Power2Move.IN:=TRUE;
			UserGapPositionNew:=Global_ChainProtection_MaxGapValue;
			UserGapVelocityNew:=Global_ChainProtection_MoveVelocity;
			btn_UserGapMove:=TRUE;
			IF Global_ChainProtection_TON_Power2Move.Q THEN
				IF FB_MOVE.BCGapDone THEN
					Global_ChainProtection_State:=88;
				END_IF
			END_IF
			IF Global_ChainProtection_TON.Q THEN//如果150s后，还没有运动到指定gap，则报错
				Global_ChainProtection_State:=-100;
			END_IF
		88://4.到位后给出反馈，且安全PLC触发
			Global_ChainProtection_Done:=TRUE;
			Plc_EmergencyStop:=FALSE;	
			Error:=TRUE;
			ErrorID:=1404;
			ErrorDescription:='Global_ChainProtection Triggered ';	
		-100:
			Global_ChainProtection_Done:=FALSE;
			Error:=TRUE;
			ErrorID:=1405;
			ErrorDescription:='NOT MOVING TO MAXGAP';
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_InitCompensationData" Id="{1e6a9c39-c8a5-4c48-b57c-71effe5e3747}">
      <Implementation>
        <ST><![CDATA[(*补偿开始*)
IF USE_SingleAxis_Compensation THEN
	//
	//1.目标位置解算
	//
	//左轴目标位置解算
	FOR	i:= 1 TO 17 DO
			IF UserGapPositionNew<M_Compensation[i+1].Gap AND UserGapPositionNew>=M_Compensation[i].Gap THEN
				IF i<>18 THEN
					PhaseShifterLinPositionNew:=(((UserGapPositionNew-M_Compensation[i].Gap)*(M_Compensation[i+1].PhaseShifterLin-M_Compensation[i].PhaseShifterLin))
							/(M_Compensation[i+1].Gap-M_Compensation[i].Gap))+M_Compensation[i].PhaseShifterLin;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				ELSIF i=18 AND UserGapPositionNew=M_Compensation[i].Gap THEN		(*Gap=14µÄÌØÊâÇé¿ö*)
					(**)
					PhaseShifterLinPositionNew:=M_Compensation[i].PhaseShifterLin;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				ELSE
					PhaseShifterLinPositionNew:=UserGapPositionNew;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				END_IF
			END_IF
	END_FOR

	//显示位置反解算
	FOR k:= 1 TO 17 DO
			IF Pos_PhaseShifterLin<M_Compensation[k+1].PhaseShifterLin AND Pos_PhaseShifterLin>=M_Compensation[k].PhaseShifterLin THEN
				UserGapPositionDisplay:=((Pos_PhaseShifterLin-M_Compensation[k].PhaseShifterLin)*(M_Compensation[k+1].Gap-M_Compensation[k].Gap))
											/(M_Compensation[k+1].PhaseShifterLin-M_Compensation[k].PhaseShifterLin)+M_Compensation[k].Gap;
				UserGapPositionDisplay:=DINT_TO_LREAL(LREAL_TO_DINT(UserGapPositionDisplay*100000))/100000;
			END_IF
	END_FOR
END_IF
(*速度可以不用解算，直接用即可*)
PhaseShifterLinVelocityDisplay:=Velo_PhaseShifterLin;
//Gap velocity
UserGapVelocityDisplay:=DINT_TO_LREAL(LREAL_TO_DINT(PhaseShifterLinVelocityDisplay*100000))/100000;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOff" Id="{e3ff8ae4-6e0c-4bb4-9a62-00e47841163f}">
      <Implementation>
        <ST><![CDATA[CASE d_state OF
		0:(*PowerOff*)
			FB_Power(Off:=TRUE);
				d_state:=1;
		1:
			IF NOT FB_power.OffStatus THEN
				d_state:=1;
			ELSE
				d_state:=88;
			END_IF
		88:(*ResetAllState*)
			btn_PowerOn:=FALSE;
			btn_UserGapMove:=FALSE;
			btn_UserGapStop:=FALSE;
			fb_ton1.IN:=FALSE;
			fb_ton2.IN:=FALSE;
			fb_ton3.IN:=FALSE;
			State:=0;
			Busy:=FALSE;
			InitPowerDone:=FALSE;
			InitCompensationDatasDone:=FALSE;
			Error:=FALSE;
			ErrorID:=0;
			m_state:=0;
			n_state:=0;
			s_state:=0;
			btn_PowerOff:=FALSE;
			d_state:=0;
			Led_Run:=FALSE;
			Led_Error:=FALSE;
			moni_State:=0;
			i:=0;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOn" Id="{cacab3c1-f169-458e-acb8-60acf8e4d140}">
      <Implementation>
        <ST><![CDATA[(****************************************************************
NAME:			A_PowerOn
DATA:			2018.1.9
VERSION:		1.0.0
DESCRIPTION:	
				ÉÏµãÃüÁîºó£¬Ë³ÐòÖ´ÐÐ£º
				1.FB_PowerOn
				·µ»ØÖ´ÐÐÊÇ·ñ³É¹¦
HISTORY:
				2019.1.9		NEW

***************************************************************)
fb_ton3(PT:=t#0.5s);
CASE State OF
	0:	(*FB_Power_On*)
		FB_Power(On:=TRUE);
		fb_ton3.IN:=TRUE;
		State:=1;
	1:	(*wait*)
		FB_power();
		IF NOT FB_power.OnStatus THEN		(*FB_Power_OnÃ»ÓÐÖ´ÐÐÍê£¬wait£¬³¬Ê±FB Error*)
			IF NOT fb_ton3.Q THEN
				State:=1;
			ELSE
				ErrorID:=1;
				State:=99;
			END_IF
		ELSE
			State:=88;
		END_IF
	88:	(*All Done*)
		btn_PowerOn:=FALSE;
		State:=0;
		Error:=FALSE;
		ErrorID:=0;
		Busy:=FALSE;
		InitPowerDone:=TRUE;
		FB_power.On:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=FALSE;
	99:
		Error:=TRUE;
		//ErrorID:=701;
		//ErrorDescription:='power on error';		
		btn_PowerOn:=FALSE;
		State:=99;
		Busy:=FALSE;
		InitPowerDone:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=TRUE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_RegularMotion" Id="{79d2706f-89ad-4612-adf2-c80c9fc85b18}">
      <Implementation>
        <ST><![CDATA[(*输入保护*)
IF btn_UserGapMove AND NOT SSMotionMode AND RegularMotionMode THEN
	IF NOT inRange_UserGapPositionNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=801;
		ErrorDescription:='target Gap position out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_UserGapVelocityNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=802;
		ErrorDescription:='target Gap velocity out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';
	END_IF
END_IF

(*分别比较四轴目标位置与当前位置的差，如果目标位置比当前位置低，则需要运动到更低-回程差一半；再运动至最终目标位置*)
//只在m=和n=0的时候判断，否则会出现一些BUG，比如往大间隙开时，运动到位后m不能回到0.
IF m_state=0 AND n_state=0 THEN
		TargetPosLessThanCurrentPos:=FALSE;
	IF PhaseShifterLinPositionNew-Pos_PhaseShifterLin<-LEDriftErrorThreshold THEN
			TargetPosLessThanCurrentPos:=TRUE;
	END_IF
END_IF

(*Move*)
IF InitPowerDone AND InitCompensationDatasDone THEN
	//IF btn_UserGapMove THEN
		(*四轴目标位置都大于当前位置，直接走到目标位置即可，不需要先走到考虑回城误差的临时位置*)
		IF NOT TargetPosLessThanCurrentPos AND NOT HysteresisMoving THEN
			CASE m_state OF
				0:
					FB_Move.Mode:=1;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode		
					FB_Move.PowerState:=st_Power;							
					FB_Move.TargetGapPosition:=PhaseShifterLinPositionNew;
					FB_Move.TargetGapVelocity:=UserGapVelocityNew;		
					IF btn_UserGapMove THEN
						FB_Move.BCGapMove:=TRUE;
						m_state:=1;
						FB_Move();
					END_IF
				1:
					btn_UserGapMove:=FALSE;
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*ÔË¶¯Î´Íê³É£¬Ñ­»·*)
						Led_Run:=TRUE;
						m_state:=1;
					ELSE									(*ÔË¶¯Íê³É£¬ÏÂÒ»²½*)
						m_state:=88;
					END_IF
				88:
					btn_UserGapMove:=FALSE;					(*×´Ì¬»Ö¸´*)
					Led_Run:=FALSE;
					m_state:=0;
			END_CASE
		(*四轴有目标位置小于当前位置，先走到临时位置，再走到目标位置*)
		ELSE
			CASE n_state OF
				0:
					FB_Move.Mode:=1;		
					FB_Move.PowerState:=st_Power;			
					
					//
					IF TargetPosLessThanCurrentPos THEN			
						FB_Move.TargetGapPosition:=PhaseShifterLinPositionNew-HysteresisError;
					ELSE
						FB_Move.TargetGapPosition:=PhaseShifterLinPositionNew;	
					END_IF				
					//
					FB_Move.TargetGapVelocity:=UserGapVelocityNew;						
					IF btn_UserGapMove THEN							
						n_state:=1;
						FB_Move.BCGapMove:=TRUE;
						FB_Move();
						HysteresisMoving:=TRUE;
					END_IF
				1:
					btn_UserGapMove:=FALSE;
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*还未运动到位置,运动过程中*)
						Led_Run:=TRUE;
						n_state:=1;
					ELSE									
						n_state:=2;							(*转到下一步，运动到最终位置*)
						FB_Move.BCGapMove:=FALSE;
						//Led_Run:=FALSE;
					END_IF
					(*
					IF NOT Unreach_LS_Bottom THEN
						n_state:=2;							(*在运动过程中如果碰到下限位，则也转到下一步，运动到最终位置*)
						FB_Move.BCGapMove_2:=FALSE;
						FB_Move.BCGapReset_2:=TRUE;
					END_IF
					*)
				2:
					FB_Move.BCGapReset:=FALSE;
					FB_Move.Mode:=1;		
					FB_Move.PowerState:=st_Power;			
					FB_Move.BCGapMove:=TRUE;
					//直接走到目标位置，已经走到位置的，可以继续下命令，只不过它不在走了而已
					FB_Move.TargetGapPosition:=PhaseShifterLinPositionNew;	
					//
					FB_Move.TargetGapVelocity:=UserGapVelocityNew;
					FB_Move();							
					n_state:=3;
				3:
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*还未运动到位置,运动过程中*)
						Led_Run:=TRUE;
						n_state:=3;
					ELSE									
						n_state:=88;							(*运动到了最终位置*)
					END_IF
					(*
					IF NOT Unreach_LS_Bottom THEN
						n_state:=88;							(*在运动过程中如果碰到下限位，则也转到下一步，运动到最终位置*)
						FB_Move.BCGapMove_2:=FALSE;
					END_IF
					*)
				88:
					btn_UserGapMove:=FALSE;					
					Led_Run:=FALSE;
					n_state:=0;
					HysteresisMoving:=FALSE;
			END_CASE
		END_IF
	//END_IF
END_IF

IF btn_UserGapStop THEN
	FB_Move.BCGapReset:=TRUE;							(*¸øÔË¶¯FB¸øÍ£Ö¹ÐÅºÅ£¬Ê¹FB_Move×´Ì¬»Ö¸´*)
	FB_Move();											(*Æô¶¯FB_Move*)
	btn_UserGapMove:=FALSE;								(*btn_GapMove:=FALSE*)
	m_state:=0;	
	n_state:=0;										(*m_state:=0;*)
	CASE s_state OF
			0:
				FB_Stop.Mode:=1;							(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£»3£ºtaperÄ£Ê½£»4£ºDebugÄ£Ê½£»5£ºBCGapÄ£Ê½*)
				FB_Stop.PowerState:=st_Power;				(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Stop.BCGapStop:=TRUE;				(*Execute TRUE*)
				FB_Stop();								(*Æô¶¯FB*)
				s_state:=1;
			1:
				FB_Stop();
				IF NOT FB_Stop.BCGapDone THEN			(*Í£Ö¹Î´Íê³É£¬Ñ­»·*)
					s_state:=1;
				ELSE									(*Í£Ö¹Íê³É£¬ÏÂÒ»²½*)
					s_state:=88;
				END_IF
			88:
				btn_UserGapStop:=FALSE;						(*»Ö¸´×´Ì¬*)
				FB_Move.BCGapReset:=FALSE;				(*ÔËÐÐFB*)
				s_state:=0;
		END_CASE
END_IF

(*触发限位开关后，相当于点击了Stop按钮*)
FTrig_ReachLS(CLK:=Unreach_LS_Near AND Unreach_LS_Far);
IF FTrig_ReachLS.Q THEN
	btn_UserGapStop:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SpectroscopyScanningMotion" Id="{6676a965-5ff1-46e4-b651-02d2762b99bc}">
      <Implementation>
        <ST><![CDATA[(*输入保护*)
IF SS_Move AND SSMotionMode AND NOT RegularMotionMode THEN
	IF NOT inRange_SS_StepSize THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=805;
		ErrorDescription:='target StepSize out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	//
	IF NOT inRange_SS_StepNumber THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=806;
		ErrorDescription:='target StepNumber out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_SS_StepVelocity THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=807;
		ErrorDescription:='target StepVelocity out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_StepEachTime_ms THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=808;
		ErrorDescription:='target StepEachTime_ms out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
END_IF
(*单步时长转换*)
StepEachTime:=INT_TO_TIME(StepEachTime_ms);
SS_TON(PT:=StepEachTime);
(*上升沿触发，初始SS位置=当前磁间隙*)
RTRG_SS_StartPositionDisplay(CLK:=SS_Move);
IF RTRG_SS_StartPositionDisplay.Q THEN
	SS_StartPositionDisplay:=UserGapPositionDisplay;
	SS_InitStartPositionDone:=TRUE;
END_IF
(*SS主程序*)
IF InitPowerDone AND InitCompensationDatasDone AND SS_Move AND SS_InitStartPositionDone THEN
	CASE SS_MoveState OF
		0:
				//UserGapPositionNew:=UserGapPositionDisplay+SS_StepSize;
				UserGapPositionNew:=SS_StartPositionDisplay+SS_StepSize*(SS_currentStep+1);
				A_InitCompensationData();
				FB_Move.Mode:=1;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode		
				FB_Move.PowerState:=st_Power;							
				FB_Move.TargetGapPosition:=PhaseShifterLinPositionNew;
				FB_Move.TargetGapVelocity:=UserGapVelocityNew;		
				FB_Move.BCGapMove:=TRUE;
				FB_Move();
				SS_MoveState:=1;
		1:
				SS_TON.IN:=TRUE;
				FB_Move();
				IF FB_Move.GapMoving AND NOT SS_TimeCountBegin THEN
					SS_StepSystemTime_Begin[SS_currentStep]:=F_GetSysTime();
					SS_TimeCountBegin:=TRUE;
				END_IF
				IF NOT FB_Move.BCGapDone THEN			
					Led_Run:=TRUE;
					SS_MoveState:=1;
				ELSE									
					SS_MoveState:=66;
					SS_StepSystemTime_End[SS_currentStep]:=F_GetSysTime();
					SS_StepCountTime[SS_currentStep]:=SS_StepSystemTime_End[SS_currentStep]-SS_StepSystemTime_Begin[SS_currentStep];
					SS_TimeCountBegin:=FALSE;
				END_IF
		66:
				SS_currentStep:=SS_currentStep+1;			
				Led_Run:=FALSE;
				IF SS_currentStep=SS_StepNumber THEN								
					SS_MoveState:=88;
				END_IF
				IF SS_currentStep<SS_StepNumber THEN
					SS_MoveState:=77;
				END_IF
		77://等待单步时长够
				IF SS_TON.Q THEN
					SS_TON.IN:=FALSE;
					SS_MoveState:=0;
				END_IF
		88:
				SS_TON.IN:=FALSE;
				SS_Move:=FALSE;	
				Led_Run:=FALSE;
				SS_MoveState:=0;
				SS_currentStep:=0;
				SS_InitStartPositionDone:=FALSE;
				//SS_StepSystemTime[SS_StepNumber]:=F_GetSysTime();
	END_CASE
END_IF
(*获取每一步耗时*)
//FOR	m:= 0 TO SS_StepNumber DO
//	SS_StepCountTime[m]:=(SS_StepSystemTime_End[m]-SS_StepSystemTime_Begin[m]);
//END_FOR

(*STOP*)
IF SS_Stop THEN
	FB_Move.BCGapReset:=TRUE;							(*¸øÔË¶¯FB¸øÍ£Ö¹ÐÅºÅ£¬Ê¹FB_Move×´Ì¬»Ö¸´*)
	FB_Move();											(*Æô¶¯FB_Move*)
	SS_Move:=FALSE;								(*btn_GapMove:=FALSE*)
	SS_MoveState:=0;										(*m_state:=0;*)
	CASE SS_StopState OF
			0:
				FB_Stop.Mode:=1;							(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£»3£ºtaperÄ£Ê½£»4£ºDebugÄ£Ê½£»5£ºBCGapÄ£Ê½*)
				FB_Stop.PowerState:=st_Power;				(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Stop.BCGapStop:=TRUE;				(*Execute TRUE*)
				FB_Stop();								(*Æô¶¯FB*)
				SS_StopState:=1;
			1:
				FB_Stop();
				IF NOT FB_Stop.BCGapDone THEN			(*Í£Ö¹Î´Íê³É£¬Ñ­»·*)
					SS_StopState:=1;
				ELSE									(*Í£Ö¹Íê³É£¬ÏÂÒ»²½*)
					SS_StopState:=88;
				END_IF
			88:
				SS_Stop:=FALSE;						(*»Ö¸´×´Ì¬*)
				FB_Move.BCGapReset:=FALSE;				(*ÔËÐÐFB*)
				SS_StopState:=0;
		END_CASE
END_IF

(*触发限位开关后，相当于点击了Stop按钮*)
FTrig_ReachLS(CLK:=Unreach_LS_Far AND Unreach_LS_Near);
IF FTrig_ReachLS.Q THEN
	SS_Stop:=TRUE;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="UserMode">
      <LineId Id="767" Count="1" />
      <LineId Id="770" Count="0" />
      <LineId Id="883" Count="1" />
      <LineId Id="882" Count="0" />
      <LineId Id="40" Count="8" />
      <LineId Id="52" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="1293" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="1149" Count="1" />
      <LineId Id="1152" Count="2" />
      <LineId Id="1156" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="1011" Count="0" />
      <LineId Id="1431" Count="0" />
      <LineId Id="1430" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_CheckInputPosVelo">
      <LineId Id="23" Count="0" />
      <LineId Id="1" Count="6" />
      <LineId Id="9" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="4" />
      <LineId Id="34" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="55" Count="4" />
      <LineId Id="54" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_CheckLinearEncoder">
      <LineId Id="61" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="3" />
      <LineId Id="2" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="6" />
      <LineId Id="69" Count="8" />
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_GlobalChainProtection">
      <LineId Id="2" Count="68" />
      <LineId Id="86" Count="37" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_InitCompensationData">
      <LineId Id="206" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="20" Count="3" />
      <LineId Id="30" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="59" Count="3" />
      <LineId Id="72" Count="4" />
      <LineId Id="254" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="278" Count="1" />
      <LineId Id="281" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="319" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="129" Count="1" />
    </LineIds>
    <LineIds Name="UserMode.A_PowerOff">
      <LineId Id="0" Count="13" />
      <LineId Id="18" Count="9" />
      <LineId Id="38" Count="0" />
      <LineId Id="28" Count="8" />
    </LineIds>
    <LineIds Name="UserMode.A_PowerOn">
      <LineId Id="0" Count="40" />
      <LineId Id="51" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="4" />
    </LineIds>
    <LineIds Name="UserMode.A_RegularMotion">
      <LineId Id="225" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="252" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="255" Count="3" />
      <LineId Id="233" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="260" Count="3" />
      <LineId Id="259" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="298" Count="2" />
      <LineId Id="304" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="33" Count="8" />
      <LineId Id="43" Count="2" />
      <LineId Id="52" Count="5" />
      <LineId Id="216" Count="0" />
      <LineId Id="58" Count="16" />
      <LineId Id="76" Count="7" />
      <LineId Id="102" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="6" />
      <LineId Id="218" Count="0" />
      <LineId Id="115" Count="18" />
      <LineId Id="135" Count="3" />
      <LineId Id="142" Count="0" />
      <LineId Id="146" Count="35" />
      <LineId Id="183" Count="15" />
      <LineId Id="1" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="200" Count="3" />
      <LineId Id="199" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_SpectroscopyScanningMotion">
      <LineId Id="171" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="190" Count="9" />
      <LineId Id="238" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="244" Count="9" />
      <LineId Id="241" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="257" Count="9" />
      <LineId Id="254" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="270" Count="9" />
      <LineId Id="267" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="300" Count="2" />
      <LineId Id="305" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="1" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="34" Count="4" />
      <LineId Id="160" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="143" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="53" Count="3" />
      <LineId Id="306" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="94" Count="2" />
      <LineId Id="98" Count="21" />
      <LineId Id="87" Count="0" />
      <LineId Id="79" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>